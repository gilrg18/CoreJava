package com.gil.java.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

//LOAD THE CLASS
public class Test {

	public static void main(String[] args) {
		try {
			//LOADING THE CLASS
			Class<?> myClass = Class.forName(Calculator.class.getName());
			System.out.println(myClass.getName());
			// All constructors on that class
			Constructor<?>[] constructors = myClass.getConstructors();
			System.out.println(Arrays.toString(constructors));
			// All the methods on that class
			System.out.println(Arrays.toString(myClass.getMethods()));
			//it will use the constructor depending the number of parameters
			
			//CREATE AN OBJECT
			Constructor<?> constructor = myClass.getConstructor(null);
			
			//creates the object with default constructor
			System.out.println(constructor.newInstance(null));
			
			//INVOKE THE PARAMETERIZED CONSTRUCTOR
			
			Constructor<?> constructor2 = myClass.getConstructor(double.class, double.class);
			//creates the object with parameterized constructor
			Object myObj = constructor2.newInstance(5,10);
			
			//INVOKE THE GETTERS
			//null because getNum1 has no parameters
			Method method = myClass.getMethod("getNum1", null);
			System.out.println(method.invoke(myObj, null));
			
			Method method2 = myClass.getMethod("getNum2", null);
			System.out.println(method2.invoke(myObj, null));
			
			//INVOKE THE SETTERS
			Method setNum1 = myClass.getMethod("setNum1", double.class);
			setNum1.invoke(myObj, 6);
			
			Method setNum2 = myClass.getMethod("setNum2", double.class);
			setNum2.invoke(myObj, 11);
			
			Method method3 = myClass.getMethod("getNum1", null);
			System.out.println(method.invoke(myObj, null));
			
			Method method4 = myClass.getMethod("getNum2", null);
			System.out.println(method2.invoke(myObj, null));
			
			// throws classnotfoundexception if it cant find the class in the
			// classpath
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
	}

	/*
	 * you have successfully assigned the loaded class to a variable
	 * 
	 * and you have accessed the name, the constructors on that class and even
	 * the methods dynamically at runtime.
	 */
}
